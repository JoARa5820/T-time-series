## 예측 하는 방법
# Simple Moving Average : 임의의 범위에 맞춰서 값을 구한다
# Weighted Moving Average : weighted 값을 최근값에 더 주고 나중값에 덜줘서 값을 구한다
# Simple Exponential Smoothing

-------------------------------------------------------------------------------

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline


airline = pd.read_csv('C:/sisisi/airline_passengers.csv',index_col='Month',parse_dates=True)
airline.head()


## Simple Moving Average
airline['6M SMA']=airline['Thousands of Passengers'].rolling(window=6).mean()
airline['12M SMA']=airline['Thousands of Passengers'].rolling(window=12).mean()

airline.plot(figsize=(12,8))


# residual(오차)구하기: 실제값 - 예측값
from sklearn.metrics import mean_squared_error

# mean_squared_error : True - 예측값
mean_squared_error(airline['Thousands of Passengers'],airline['6M SMA'].dropna()) # 실습중에도 에러남

-------------------------------------------------------------------------------

## Weighted Moving Averagem
airline['WMA12'] = airline['Thousands of Passengers'].ewm(span=12).mean()
airline['WMA6'] = airline['Thousands of Passengers'].ewm(span=6).mean()

airline[['Thousands of Passengers','WMA6','WMA12']]
airline[['Thousands of Passengers','WMA6','WMA12']].plot() # window가 12임에도 잘 따라가고 있다.

-------------------------------------------------------------------------------
# (종류) Simple Exponential Smoothing, Holt's, Holt-Winter's

# Exp Smoothing: 시계열 데이터의 지수 평활화는 가장 오래된 관측치에 대해 기하 급수적으로 감소하는 가중치를 할당합니다.
# 즉, 데이터가 오래 될수록 데이터의 우선 순위가 낮아집니다(가중치).
# 최신 데이터는 더 관련성이 높고 더 많은 가중치가 할당됩니다. 
-------------------------------------------------------------------------------

## Simple Exponential Smoothing

from statsmodels.tsa.api import SimpleExpSmoothing

train = airline[:'1959']
test = airline['1960':]

train['Thousands of Passengers'].plot(figsize=(15,8))
test['Thousands of Passengers'].plot()


ses_model = SimpleExpSmoothing(np.asarray(train['Thousands of Passengers']))
ses_result = ses_model.fit()
y_hat = test.copy()
y_hat['SES'] = ses_result.forecast(len(test))


# 묶어서 실행하기
plt.figure(figsize=(15,5))
plt.plot(train['Thousands of Passengers'],label='Train')
plt.plot(test['Thousands of Passengers'],label='Test')
plt.plot(y_hat['SES'],label='Simple Exp Smoothing')
plt.legend()
# 결과: 예측이 제대로 되지 않았음


# 평균 제곱근 오차
rmse = np.sqrt(mean_squared_error(test['Thousands of Passengers'],y_hat['SES']))
rmse # 102.97653454387881 : 오차값이 매우 크다.

-------------------------------------------------------------------------------

## Holt's Exponential Smoothing

from statsmodels.tsa.api import Holt

holt_model = Holt(np.asarray(train['Thousands of Passengers']))
holt_result = holt_model.fit()
y_hat['HOLT'] = holt_result.forecast(len(test))


# 묶어서 실행하기
plt.figure(figsize=(15,5))
plt.plot(train['Thousands of Passengers'],label='Train')
plt.plot(test['Thousands of Passengers'],label='Test')
plt.plot(y_hat['HOLT'],label='Holts Exp Smoothing')
plt.legend()
# 결과: 예측이 제대로 되지 않았지만, SES방식보다는 나음


rmse = np.sqrt(mean_squared_error(test['Thousands of Passengers'],y_hat['HOLT']))
rmse # 92.6663711446281 : SES방식보단 오차값이 줄어들었지만 여전히 오차가 크다.

-------------------------------------------------------------------------------

## Holt-Winter's Exponential Smoothing

from statsmodels.tsa.api import ExponentialSmoothing

winter_model = ExponentialSmoothing(np.asarray(train['Thousands of Passengers']),seasonal_periods=12,trend='add',seasonal='add')
winter_result = winter_model.fit()
y_hat['WINTER'] = winter_result.forecast(len(test))


# 묶어서 실행하기
plt.figure(figsize=(15,5))
plt.plot(train['Thousands of Passengers'],label='Train')
plt.plot(test['Thousands of Passengers'],label='Test')
plt.plot(y_hat['WINTER'],label='Winter Exp Smoothing')
plt.legend()
# 결과: 예측이 잘 되었음


rmse = np.sqrt(mean_squared_error(test['Thousands of Passengers'],y_hat['WINTER']))
rmse # 15.570830458875657 : 오차값이 매우 개선되어 작아졌다.

-------------------------------------------------------------------------------